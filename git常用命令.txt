git clone -b dev 远程仓库地址     ...<克隆远程仓库dev分支>

git branch	...<显示本地分支>

git branch -a	...<显示所有分支，包括远程仓库的分支>

git branch -d dev	...<删除本地分支dev>

git checkout dev	...<切换到指定分支dev>

git checkout -b dev	...<创建并切换到分支dev>

git switch -c dev   ...<创建并切换到分支dev>

git push --delete origin dev	...<删除远程仓库的分支dev>

git push origin dev:master    ...<将本地的dev分支内容提交到远程仓库master分支上，当本地dev提交到远程dev时，可以省略，即git push origin dev>

git fetch	...<将本地的commit id更新至远程仓库的commit id，不更新本地仓库的代码>

git pull	...<拉取远程仓库，将本地仓库与远程仓库同步>

git log --pretty=oneline	...<以单行形式展示log日志,显示具体的提交commit id>

git log --graph		...<查看分支合并图>

git remote -v		...<查看远程仓库的地址>

git remote add origin <远程仓库地址>    ...将本地仓库与远程仓库关联起来，origin可以随意指定

git remote remove origin    ...取消本地仓库与远程仓库的关联

git branch -vv  ...<查看本地分支与远程分支的关联>

git branch --unset-upstream   ...<取消当前本地分支与远程分支的关联>

git branch --set-upstream-to=origin/dev   ...<将本地的分支与远程dev分支关联起来>

git merge dev --no-ff   ...<合并dev到指定分支，保留合并信息>

git merge dev -Xignore-space-change   ...<合并dev到指定分支，将一个空白符与多个连续的空白字符视作等价的>

git merge dev -Xignore-all-space   ...<合并dev到指定分支，比较行时 完全忽略 空白修改>

git merge --abort   ...<中断合并>

git remote show origin   ...<查看远程仓库地址，和分支对应情况>

git remote prune origin   ...<删除本地存在的远程仓库已不存在的分支>

git stash            ...<将未add的工作区代码储存起来，可以带有保存信息———— git stash save message。message为本次保存的注释信息>

git stash pop        ...<将储存的代码恢复到工作区，并将储存的记录删除到，可以带有要恢复的次序———— git stash pop stash@{0} === git stash pop>

git stash list      ...<展示储存的代码列表>

git stash clear     ...<清除所有的储存代码>

git stash apply stash@{0}    ...<恢复次序为0的储存代码，不删除，list里面依然存在>

git stash drop stash@{0}     ...<删除次序为0的储存代码>

git reset --hard 版本号      ...<回退到指定版本号>

git reset HEAD^              ...<回退上一版本，保留工作区的代码，即保留上版本与本次commit后的代码（回到git add前）；HEAD^^表示上上个版本(^数量表示多少个版本)，可以写为HEAD~2>

git reset --soft HEAD^       ...<回退上一版本，保留工作区代码，回到（git commit前，即已git add）>

git revert -n 版本号          ...<用于回滚某个版本号，保留回滚的版本号之后的操作，并手动提交生成一个新的提交日志>

git reset 文件名             ...<撤销暂存工作区的代码，即取消git add的操作，返回没有add 之前的操作>

git restore  --staged 文件   ...<撤销暂存工作区的代码，即取消git add的操作，返回没有add 之前的操作>

git chekout .                ...<放弃工作区所有的更改>

git restore .                ...<放弃工作区所有的更改>
